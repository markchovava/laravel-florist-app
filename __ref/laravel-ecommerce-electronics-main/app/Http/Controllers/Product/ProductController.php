<?php

namespace App\Http\Controllers\Product;

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\File;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

use App\Models\UserProduct;
use App\Models\Product\Product;
use App\Models\Product\ProductSerialNumber;
use App\Models\Product\Category;
use App\Models\Product\ProductCategory;
use App\Models\Product\ProductImage;
use App\Models\Product\ProductMeta;
use App\Models\Product\Tag\ProductTag;
use App\Models\Product\ProductBrand;
use App\Models\Product\Tag\Tag;
use App\Models\Product\Tax;
use App\Models\Product\Brand;
use App\Models\Product\CategoryProduct;
use App\Models\Product\Discount;
use App\Models\Product\Inventory;
use App\Models\Product\Specification\Specification;
use App\Models\Product\Variation;


class ProductController extends Controller
{
    public function index()
    {
        $products = Product::with(['categories','brands','tags', 'users',])
                                    ->orderBy('updated_at','desc')
                                    ->paginate(15);
        $data['products'] = isset($products) ? $products : NULL;
        $data['results'] = NULL;
        $data['search'] = NULL;
        /*  */
        return view('backend.products.index', $data);
    }

    public function search(Request $request)
    {
        $search = $request->search;
        $results = Product::with(['categories','brands','tags', 'users',])
                                    ->where('name', 'LIKE', '%' . $search . '%')
                                    ->orderBy('updated_at','desc')
                                    ->paginate(15);
        $data['results'] = isset($results) ? $results : NULL;
        $data['search'] = $search;
        $data['products'] = NULL;
        /*  */
        return view('backend.products.index', $data);
    }

    public function add()
    {
        $data['categories'] = Category::all();
        $data['brands'] = Brand::all();
        $data['tags'] = Tag::all();
        return view('backend.products.add', $data);
    }

    public function store(Request $request){
        DB::transaction(function() use($request){
            /* Product */
            $product = new Product();
            if( $request->file('product_thumbnail') ){
                $product_thumbnail = $request->file('product_thumbnail');
                $image_extension = strtolower($product_thumbnail->getClientOriginalExtension());
                $image_name = date('YmdHi'). '.' . $image_extension;
                $upload_location = 'storage/products/thumbnail/';
                if($product->image){
                    if(file_exists(public_path($upload_location . $product->image))){
                        unlink($upload_location . $product->image);
                    }
                    $product_thumbnail->move($upload_location, $image_name);
                    $product->image = $image_name;                    
                }else{
                    $product_thumbnail->move($upload_location, $image_name);
                    $product->product_thumbnail = $image_name;
                }              
            }
            $product->name = $request->product_name;
            $product->description = $request->product_description;
            $product->short_description = $request->product_short_description;
            $product->special_offer = $request->product_special_offer;
            $product->status = $request->product_status;
            $product->sku = $request->sku;
            $product->barcode = $request->barcode;
            $product->qrcode = $request->qrcode;
            $product->price = $request->product_price;
            $product->zwl_price = $request->zwl_product_price;
            $product->physical_delivery = $request->physical_delivery;
            $product->weight = $request->product_weight;
            $product->width = $request->product_width;
            $product->height = $request->product_height;
            $product->length = $request->product_length;
            $product->save();

            $serialnumber = $request->add__serialNumber;
            //dd($serialnumber);
            foreach($serialnumber as $_data){
                $serial = new ProductSerialNumber();
                $serial->product_id = $product->id;
                $serial->serial_number = $_data[0];
                $serial->save();
            }

            /* User Product */
            $user_product = new UserProduct();
            $user_product->user_id = Auth::user()->id;
            $user_product->product_id = $product->id;
            $user_product->save();
            
            /* Category Products */
            $categories = $request->category__repeaterBasic;  // Is generated by formrepeater
            if($categories){
                foreach($categories as $category){
                    foreach($category as $key => $_data){
                        $product_category = new ProductCategory();
                        $product_category->product_id = $product->id;
                        $product_category->category_id = $_data;
                        //dd($_data);
                        $product_category->save();
                    }            
                }
            }

            /* Brands */ 
            $brands = $request->brand__repeaterBasic;
            if($brands){
                foreach($brands as $brand){
                    foreach($brand as $key => $_data){
                        $product_brand = new ProductBrand();
                        $product_brand->product_id = $product->id;
                        $product_brand->brand_id = $_data;
                        $product_brand->save();
                    }            
                }
            }           
            /* Tags */ 
            $tags = $request->tag__repeaterBasic;  // Is generated by formrepeater
            if($tags){
                foreach($tags as $tag){
                    foreach($tag as $key => $_data){
                        $product_tag = new ProductTag();
                        $product_tag->product_id = $product->id;
                        $product_tag->tag_id = $_data;
                        $product_tag->save();
                    }            
                }
            } 
            /* Product Images */
            if( $request->file('product_images') ){
                $images = $request->file('product_images'); 
                foreach($images as $image){
                    $product_images = new ProductImage();
                    $product_images->product_id = $product->id;
                    $image_extension = strtolower($image->getClientOriginalExtension());
                    $image_name = hexdec(uniqid()) . '.' . $image_extension;
                    $upload_location = 'storage/products/images/';
                    if($product_images->image){
                        if(file_exists(public_path($upload_location . $product_images->image))){
                            unlink($upload_location . $product_images->image);
                        }
                        $image->move($upload_location, $image_name);
                        $product_images->image = $image_name;                      
                    }else{
                        $image->move($upload_location, $image_name);
                        $product_images->image = $image_name;
                    }                
                    $product_images->save();
                }         
            }
            /* Product Metas */
            $product_meta = new ProductMeta();
            $product_meta->product_id = $product->id; 
            $product_meta->title = $request->meta_title;  
            $product_meta->description = $request->meta_description; 
            $product_meta->keywords = $request->meta_keywords;
            $product_meta->save(); 
            /* Product Discount */
            $product_discount = new Discount();
            $product_discount->product_id = $product->id; 
            $product_discount->name = $request->discount_option;
            $product_discount->discount_percent = $request->discount_percent;
            $product_discount->save();
            /* Product Tax */
            $product_tax = new Tax();
            $product_tax->product_id = $product->id;
            $product_tax->name = $request->tax_name;
            $product_tax->amount_percent = $request->tax_amount_percent;
            $product_tax->save();
            /* Product Inventory */
            $product_inventory = new Inventory();
            $product_inventory->product_id = $product->id;
            $product_inventory->in_store_quantity = $request->in_store_quantity;
            $product_inventory->in_warehouse_quantity = $request->in_warehouse_quantity;
            $product_inventory->save();
             /* Variations */ 
             $variations = $request->variation__addOptions; // Is generated by formrepeater
             if($variations){
                foreach($variations as $variation => $_data){    
                    $product_variation = new Variation();
                    $product_variation->product_id = $product->id;
                    //dd($product_variation->product_id);
                    $product_variation->name = $_data[0];
                    $product_variation->value = $_data[1];
                    //dd($product_variation->value);
                    $product_variation->save();              
                }
             }

             $specifications = $request->specification__addOptions; // Is generated by formrepeater
             if($specifications){
                foreach($specifications as $specification => $_data){    
                    $product_specification = new Specification();
                    $product_specification->product_id = $product->id;
                    $product_specification->name = $_data[0];
                    $product_specification->value = $_data[1];
                    $product_specification->save();              
                }
             }
        });

        $notification = [
            'message' => 'Product Added Successfully!!...',
            'alert-type' => 'success'
        ];

        return redirect()->route('admin.products')->with($notification);
    }

    public function edit($id){
        $data['categories'] = Category::orderBy('id','desc')->get();
        $data['tags'] = Tag::orderBy('id','desc')->get();
        $data['brands'] = Brand::all();
        $data['product_metas'] = ProductMeta::where('product_id', $id)->get();
        $data['discounts'] = Discount::where('product_id', $id)->get();
        $data['inventories'] = Inventory::where('product_id', $id)->get();
        $data['taxes'] = Tax::where('product_id', $id)->get();
        $data['variations'] = Variation::where('product_id', $id)->get();
        $data['product_serial'] = ProductSerialNumber::where('product_id', $id)->get();
        $data['specifications'] = Specification::where('product_id', $id)->get();
        // Matches with our request id
        $data['product'] = Product::with([
            'categories',
            'brands',
            'product_metas',
            'discounts',
            'inventories',
            'taxes',
            'tags',
            'variations',
            ])->where('id', $id)->first();
        //dd($data['editProduct']->toArray());
        return view('backend.products.edit', $data);
    }

    public function view($id){
        $data['categories'] = Category::all();
        $data['tags'] = Tag::all();
        $data['brands'] = Brand::all();
        $data['product_metas'] = ProductMeta::where('product_id', $id)->get();
        $data['discounts'] = Discount::where('product_id', $id)->get();
        $data['inventories'] = Inventory::where('product_id', $id)->get();
        $data['taxes'] = Tax::where('product_id', $id)->get();
        $data['variations'] = Variation::where('product_id', $id)->get();
        // Matches with our request id
        $data['product'] = Product::with([
            'categories',
            'brands',
            'product_metas',
            'product_images',
            'discounts',
            'inventories',
            'taxes',
            'tags',
            'variations',
            ])->where('id', $id)->first();
        //dd($data['editProduct']->toArray());
        return view('backend.products.view', $data);
    }

    public function update(Request $request, $id){
        DB::transaction(function() use($request, $id){
            /*
            *   Product
            */
            $product = Product::find($id);
            if( $request->file('product_thumbnail') ){
                $product_thumbnail = $request->file('product_thumbnail');
                $image_extension = strtolower($product_thumbnail->getClientOriginalExtension());
                $image_name = date('YmdHi'). '.' . $image_extension;
                $upload_location = 'storage/products/thumbnail/';
                if($product->image){
                    if(file_exists(public_path($upload_location . $product->image))){
                        unlink($upload_location . $product->image);
                    }
                    $product_thumbnail->move($upload_location, $image_name);
                    $product->product_thumbnail = $image_name;                      
                }else{
                    $product_thumbnail->move($upload_location, $image_name);
                    $product->product_thumbnail = $image_name;
                }          
            }
            $product->name = $request->product_name;
            $product->description = $request->product_description;
            $product->short_description = $request->product_short_description;
            $product->special_offer = $request->product_special_offer;
            $product->status = $request->product_status;
            $product->sku = $request->sku;
            $product->barcode = $request->barcode;
            $product->serialnumber = $request->serialnumber;
            $product->qrcode = $request->qrcode;
            $product->price = $request->product_price;
            $product->zwl_price = $request->zwl_product_price;
            $product->physical_delivery = $request->physical_delivery;
            $product->weight = $request->product_weight;
            $product->width = $request->product_width;
            $product->height = $request->product_height;
            $product->length = $request->product_length;
            $product->updated_at = now();
            $product->save();
    
            if(!empty($request->edit__serialNumber)){
                /* Deletes previous saved records before saving new records  */
                $product_serial = ProductSerialNumber::where('product_id', $product->id)->delete();
                $edit_serialnumber = $request->edit__serialNumber;
                foreach($edit_serialnumber as $_data){
                    $product_serial = new ProductSerialNumber();
                    $product_serial->product_id = $product->id;
                    $product_serial->serial_number = $_data;
                    $product_serial->save();
                }
            }     
            if(!empty($request->add__serialNumber)){
                $serialnumber = $request->add__serialNumber;               
                foreach($serialnumber as $_data){
                    $product_serial = new ProductSerialNumber();
                    $product_serial->product_id = $product->id;
                    $product_serial->serial_number = $_data[0];
                    $product_serial->save();
                }
                $product_serial = ProductSerialNumber::where('serial_number', NULL)->delete();
            }
            
            /* User Product Link */
            if(UserProduct::where('product_id', '=', $product->id)->exists()){
                $user_product = UserProduct::where('product_id', $product->id)->first();
                $user_product->user_id = Auth::user()->id;
                $user_product->save();
            } else{
                $user_product = new UserProduct();
                $user_product->user_id = Auth::user()->id;
                $user_product->product_id = $product->id;
                $user_product->save();
            }     
            /* Category Products */
            $categories = $request->category__repeaterBasic;  // Is generated by formrepeater
            $product_category = ProductCategory::where('product_id', $product->id)->delete();  // Is generated by formrepeater
            if($categories){
                foreach($categories as $category){
                    foreach($category as $key => $_data){
                        $product_category = new ProductCategory();
                        $product_category->product_id = $product->id;
                        $product_category->category_id = $_data;
                        //dd($_data);
                        $product_category->save();
                    }            
                }
            }
            /* Brands */ 
            $brands = $request->brand__repeaterBasic;
            $product_brand = ProductBrand::where('product_id', $product->id)->delete();
            if($brands){
                foreach($brands as $brand){
                    foreach($brand as $key => $_data){
                        $product_brand = new ProductBrand();
                        $product_brand->product_id = $product->id;
                        $product_brand->brand_id = $_data;
                        $product_brand->save();
                    }            
                }
            }           
            /* Tags */ 
            $tags = $request->tag__repeaterBasic;  // Is generated by formrepeater
            $product_tag = ProductTag::where('product_id', $product->id)->delete();
            if($tags){
                foreach($tags as $tag){
                    foreach($tag as $key => $_data){
                        $product_tag = new ProductTag();
                        $product_tag->product_id = $product->id;
                        $product_tag->tag_id = $_data;
                        $product_tag->save();
                    }            
                }
            } 

            /* 
            *   Product Images 
            */
            //$db_product_images = $request->db_product_images;
            /* 
            *   Check if images are present inf the form request
            */
            if(!empty($request->db_product_images)){
                if( !empty($request->file('product_images')) ){
                    $images = $request->file('product_images');
                    foreach($images as $image){
                        $product_images = new ProductImage();
                        $product_images->product_id = $product->id;
                        $image_extension = strtolower($image->getClientOriginalExtension());
                        $image_name = hexdec(uniqid()) . '.' . $image_extension;
                        $upload_location = 'storage/products/images/'; 
                        $image->move($upload_location, $image_name);
                        $product_images->image = $image_name;
                        $product_images->save();
                    }
                }
            } elseif(empty($request->db_product_images)){
                $images = ProductImage::where('product_id', $product->id)->get();
                $upload_location = 'storage/products/images/'; 
                for($i = 0; $i < count($images); $i++){
                    if(file_exists(public_path($upload_location . $images[$i]->image))){
                        unlink($upload_location . $images[$i]->image);
                    }
                }
                $images = ProductImage::where('product_id', $product->id)->delete();
                if( $request->file('product_images') ){
                    $images = $request->file('product_images');
                    foreach($images as $image){
                        $product_images = new ProductImage();
                        $product_images->product_id = $product->id;
                        $image_extension = strtolower($image->getClientOriginalExtension());
                        $image_name = hexdec(uniqid()) . '.' . $image_extension;
                        $upload_location = 'storage/products/images/'; 
                        $image->move($upload_location, $image_name);
                        $product_images->image = $image_name;
                        $product_images->save();
                    }
                }
            }
            
            /* if( $request->file('product_images') ){
                $images = $request->file('product_images');
                $product_images = ProductImage::where('product_id', $product->id)->delete();
                foreach($images as $image){
                    $product_images = new ProductImage();
                    $product_images->product_id = $product->id;
                    $image_extension = strtolower($image->getClientOriginalExtension());
                    $image_name = hexdec(uniqid()) . '.' . $image_extension;
                    $upload_location = 'storage/products/images/';    
                    if($product_images->image){
                        if(file_exists(public_path($upload_location . $product_images->image))){
                            unlink($upload_location . $product_images->image);
                        }
                        $image->move($upload_location, $image_name);                     
                    } else{
                        $image->move($upload_location, $image_name);
                        $product_images->image = $image_name;
                    }          
                    $product_images->save();
                }        
            } */

            /* Product Metas */
            $product_meta = ProductMeta::where('product_id', $product->id)->first();
            if(!empty($product_meta)){
                $product_meta->title = $request->meta_title;  
                $product_meta->description = $request->meta_description; 
                $product_meta->keywords = $request->meta_keywords;
                $product_meta->save(); 
            } else{
                $product_meta = new ProductMeta();
                $product_meta->product_id = $product->id;
                $product_meta->title = $request->meta_title;  
                $product_meta->description = $request->meta_description; 
                $product_meta->keywords = $request->meta_keywords;
                $product_meta->save(); 
            }
            /* Product Discount */
           
            $product_discount = Discount::where('product_id', $product->id)->first(); 
            if(!empty($product_meta)){
                $product_discount->name = $request->discount_option;
                $product_discount->discount_percent = $request->discount_percent;
                $product_discount->save();
            } else{
                $product_discount = new Discount();
                $product_discount->product_id = $product->id;
                $product_discount->name = $request->discount_option;
                $product_discount->discount_percent = $request->discount_percent;
                $product_discount->save();
            }
            /* Product Tax */
            $product_tax = Tax::where('product_id', $product->id)->first();
            if(!empty($product_tax)){
                $product_tax->name = $request->tax_name;
                $product_tax->amount_percent = $request->tax_amount_percent;
                $product_tax->save();
            } else{
                $product_tax = new Tax();
                $product_tax->product_id = $product->id;
                $product_tax->name = $request->tax_name;
                $product_tax->amount_percent = $request->tax_amount_percent;
                $product_tax->save();
            }
            /* Product Inventory */
            $product_inventory = Inventory::where('product_id', $product->id)->first();
            if(!empty($product_tax)){
                $product_inventory->in_store_quantity = $request->in_store_quantity;
                $product_inventory->in_warehouse_quantity = $request->in_warehouse_quantity;
                $product_inventory->save();
            } else {
                $product_inventory = new Inventory();
                $product_inventory->product_id = $product->id;
                $product_inventory->in_store_quantity = $request->in_store_quantity;
                $product_inventory->in_warehouse_quantity = $request->in_warehouse_quantity;
                $product_inventory->save();
            }
            
             
            /* ::::: Variations ::::: */            
             $variation_from_db = $request->variation_from_db;
             if($variation_from_db){
                $product_var = Variation::where('product_id', $product->id)->delete();
                foreach($variation_from_db as $_data){
                    $product_var = new Variation();
                    $product_var->product_id = $product->id;
                    $product_var->name = $_data[0];
                    $product_var->value = $_data[1];
                    $product_var->save();
                }  
             }
             $variations = $request->variation__addOptions; // Is generated by formrepeater
             if(!empty($variations)){
                // dd($variations);
                foreach($variations as $variation => $_data){    
                    $product_variation = new Variation();
                    $product_variation->product_id = $product->id;
                    $product_variation->name = $_data[0];
                    $product_variation->value = $_data[1];
                    $product_variation->save();              
                }
                /* Delete variation where name is empty */
                Variation::where('name', NULL)->delete();
                /* Delete variation where value is empty */
                Variation::where('value', NULL)->delete();
             }

              /* ::::: Specification ::::: */            
              $specification_from_db = $request->specification_from_db;
              if($specification_from_db){
                 $product_specification = Specification::where('product_id', $product->id)->delete();
                 foreach( $specification_from_db as $_data){
                     $product_specification = new Specification();
                     $product_specification->product_id = $product->id;
                     $product_specification->name = $_data[0];
                     $product_specification->value = $_data[1];
                     $product_specification->save();
                 }  
              }
              $specifications = $request->specification__addOptions; // Is generated by formrepeater
              if(!empty($specifications)){
                 foreach($specifications as $specification => $_data){    
                     $product_specification = new Specification();
                     $product_specification->product_id = $product->id;
                     $product_specification->name = $_data[0];
                     $product_specification->value = $_data[1];
                     $product_specification->save();              
                 }
                 /* Delete variation where name is empty */
                 Specification::where('name', NULL)->delete();
                 /* Delete variation where value is empty */
                 Specification::where('value', NULL)->delete();
              }
        });

        $notification = [
            'message' => 'Product Updated Successfully!!...',
            'alert-type' => 'success'
        ];
        return redirect()->route('admin.products')->with($notification);
    }

    public function remove_image($id){
        $image = ProductImage::where('id',  $id)->first();
        $upload_location = 'storage/products/images/';
        if(!empty($image)){
            if(file_exists(public_path($upload_location .  $image->image))){
                unlink($upload_location . $image->image);
            }else{
                return response()->json('Image Not found in Folder...');
            } 
            ProductImage::where('image', $image->image)->delete();
            return response()->json('Deleted Successfully!...');
        }else{
            return response()->json('Image Not found in Database...');
        }
    }

    public function delete($id){
        DB::transaction(function() use($id){
            /* Product */
            $product = Product::find($id);
            $product->delete();
            if($product->product_thumbnail != NULL){ 
                $image = public_path() . '/storage/products/thumbnail/' . $product->product_thumbnail;
                if(File::exists($image)){ 
                    Storage::delete($image);
                }
            }  
            /* User Product Link */
            $user_product = UserProduct::where('product_id', $product->id);
            $user_product->delete(); 
            /* Category Products */
            $product_category = ProductCategory::where('product_id', $product->id);
            $product_category->delete();
            /* Brands */ 
            $product_brand = ProductBrand::where('product_id', $product->id);
            $product_brand->delete();     
            /* Tags */ 
            $product_tag = ProductTag::where('product_id', $product->id);
            $product_tag->delete();
            /* Product Metas */
            $product_meta = ProductMeta::where('product_id', $product->id);
            $product_meta->delete();
            /* Product Discount */
            $product_discount = Discount::where('product_id', $product->id);
            $product_discount->delete();
            /* Product Tax */
            $product_tax = Tax::where('product_id', $product->id);
            $product_tax->delete();
             /* Product Inventory */
            $product_inventory = Inventory::where('product_id', $product->id);
            $product_inventory->delete();
             /* Variations */ 
             $product_variation = Variation::where('product_id', $product->id);
             $product_variation->delete();

             /* Product Images */ 
             $product_images_from_db = ProductImage::where('product_id', $product->id)->get();
            if($product_images_from_db != NULL) { 
                foreach($product_images_from_db as $product_image){
                    $image = public_path() . 'storage/products/images/' . $product_image->image ;
                    if(File::exists($image)){
                        Storage::delete($image);
                    }
                }
                $product_images = ProductImage::where('product_id', $product->id);
                $product_images->delete();
            }  
            
        });

        $notification = [
            'message' => 'Product Deleted Successfully!!...',
            'alert-type' => 'success'
        ];
        return redirect()->route('admin.products')->with($notification);
    }

    public function serial($id){
        $data['product'] = Product::find($id);
        $data['product_serial'] = ProductSerialNumber::where('product_id', $id)->get();
        return view('backend.products.serial', $data);
    }
}

